#!/usr/bin/env python3
#
# EPITECH PROJECT, 2022
# B-CNA-410-PAR-4-1-groundhog-yannis.defontaine
# File description:
# test_func
#

from random import randint
from sys import path
from src.Mathematic.ichimoku import tenkanSen, kijunSen, chikoSpan, senkoSpanA, senkoSpanB

ERROR = 84

path.append('./')

#      TENKANSEN


def test_tenkanSen_ERROR_no_enough_value_1():
    data = [0, 1]
    assert tenkanSen(data, data) == ERROR


def test_tenkanSen_ERROR_no_enough_value_2():
    data = [randint(0, 100) for _ in range(8)]
    assert tenkanSen(data, data) == ERROR


def test_tenkanSen_1():
    max = [59, 2, 96, 8, 86, 79, 20, 10, 46, 3, 21, 76, 24, 7, 20]
    min = [0, 100, 6, 6, 1, 45, 79, 90, 4, 7, 25, 61, 15, 65, 47]
    assert tenkanSen(max, min) == 48.0


def test_tenkanSen_2():
    max = [94, 85, 68, 36, 89, 7, 75, 43, 81, 79, 100, 68, 23, 63, 67, 68, 18, 7]
    min = [77, 22, 4, 17, 22, 22, 61, 39, 44, 0, 42, 97, 42, 39, 12, 17, 0, 58]
    assert tenkanSen(max, min) == 49


def test_tenkanSen_3():
    max = [15, 91, 81, 13, 80, 73, 100, 56, 73, 16, 60, 44, 61, 40, 5, 95, 19, 24, 55, 88, 26, 7, 23, 77, 68, 48, 14, 12, 99, 16, 23, 18, 24, 44, 13, 24, 19, 70, 78, 72, 63, 80, 29, 61, 35]
    min = [17, 31, 55, 48, 75, 81, 27, 60, 53, 42, 27, 98, 17, 19, 20, 89, 61, 16, 36, 96, 91, 93, 76, 15, 7, 82, 20, 7, 5, 36, 26, 28, 87, 93, 75, 71, 97, 71, 59, 93, 67, 90, 98, 40, 42]
    assert tenkanSen(max, min) == 58.5


def test_tenkanSen_4():
    max = [22, 85, 44, 8, 76, 2, 48, 40, 10, 85, 84, 17, 91, 93, 12, 36, 48, 87, 22, 47, 68, 57, 65]
    min = [69, 73, 87, 90, 96, 20, 26, 75, 84, 98, 48, 78, 73, 85, 51, 31, 21, 77, 91, 3, 72, 74, 12]
    assert tenkanSen(max, min) == 52.5


def test_tenkanSen_5():
    max = [61, 45, 93, 48, 45, 96, 9, 75, 26, 69, 75, 16, 67, 37, 75, 36, 13, 60, 86, 77, 81, 44, 52, 32, 30, 16, 23, 20, 43, 14, 77, 39, 11, 71, 49, 10, 6, 24, 94, 71, 67, 20, 55, 13, 23, 63, 67, 42, 58, 81, 66, 87, 72, 1, 93, 80, 54, 6, 54, 71, 70, 50, 36, 91, 14, 51, 37, 37, 71, 28, 86, 68, 8, 20]
    min = [93, 41, 91, 42, 93, 32, 21, 72, 5, 24, 90, 57, 51, 82, 50, 97, 4, 42, 37, 81, 46, 54, 93, 98, 53, 40, 72, 47, 94, 36, 70, 9, 24, 90, 18, 20, 52, 86, 30, 61, 82, 52, 66, 3, 20, 81, 51, 48, 53, 14, 22, 31, 64, 80, 14, 12, 69, 50, 63, 17, 68, 98, 22, 52, 11, 70, 1, 29, 18, 53, 15, 34, 29, 17]
    assert tenkanSen(max, min) == 50.5


def test_tenkanSen_6():
    max = [52, 83, 25, 57, 97, 35, 89, 55, 60, 88, 20, 36, 20, 43, 3, 12, 42, 56, 41, 29, 60, 16, 66, 84, 63, 76, 40, 88, 50, 5, 24]
    min = [72, 90, 58, 11, 8, 38, 64, 26, 66, 56, 47, 21, 1, 82, 64, 25, 79, 31, 91, 97, 94, 94, 87, 81, 45, 70, 98, 82, 53, 33, 21]
    assert tenkanSen(max, min) == 52.5

#      KIJUNSEN


def test_kijunSen_ERROR_no_enough_value_1():
    data = [0, 1]
    assert kijunSen(data, data) == ERROR


def test_kijunSen_ERROR_no_enough_value_2():
    data = [randint(0, 100) for _ in range(8)]
    assert kijunSen(data, data) == ERROR


def test_kijunSen_1():
    max = [100, 24, 21, 98, 59, 47, 24, 51, 51, 76, 91, 62, 29, 62, 25, 71, 39, 5, 25, 65, 4, 58, 47, 26, 41, 40, 91, 44, 22, 62, 30, 32, 56, 73, 14, 18, 88, 2, 2, 2, 72, 32, 86, 21, 95, 19, 87, 99, 3, 65, 1, 94, 41, 100, 9, 91, 10, 36, 100, 72, 36, 26, 12, 64, 92, 19, 30, 61, 83, 63, 47, 36, 33, 100]
    min = [27, 38, 22, 99, 35, 10, 27, 41, 45, 27, 95, 94, 49, 11, 28, 100, 49, 78, 81, 50, 55, 81, 42, 45, 88, 41, 1, 68, 2, 0, 75, 3, 75, 44, 12, 36, 11, 44, 66, 13, 68, 27, 60, 77, 51, 71, 73, 11, 64, 56, 56, 60, 40, 91, 61, 32, 3, 19, 38, 15, 72, 38, 27, 50, 23, 61, 77, 30, 83, 17, 63, 57, 47, 40]
    assert kijunSen(max, min) == 55.0


def test_kijunSen_2():
    max = [28883, 33378, 20565, 2673, 8753, 30338, 2331, 2909, 15686, 16017, 29115, 32816, 13486, 24013, 5380, 615, 616, 31869, 28660, 31928, 24089, 18368, 12976, 11850, 14714, 9409, 18973, 25301, 10020, 26328, 2058, 27532, 12043, 7455, 15691, 29748, 20218, 31587, 33631, 11787, 18628, 16799, 11637, 1432, 13953, 31988, 29284, 8703, 1008, 19016, 13578, 5863, 14751, 17494, 26343, 25675, 12291, 1511, 32047, 26014, 16107, 32440, 17637, 32514, 11469, 9806, 29491, 6608, 5526, 34969, 30656, 8528, 8522, 26589, 14594, 29645, 16250, 28972, 32788, 8961, 2953, 14665, 5328, 13222, 7023, 17228, 4743, 27779, 9727, 29297, 18829, 11399, 29496, 17560, 10037, 30085, 19879, 25282, 928, 8079, 6505, 13388, 5771, 27363, 9722, 14274, 4349, 24299, 31319, 6380, 17711, 22943, 21573, 32885, 20322, 26691, 34144, 11504, 34103, 30791, 15844, 14530, 25380, 34032, 16846, 28074, 9617, 6843, 4812, 20013, 19303, 23390, 31934, 30799, 21748, 34573, 31414, 30590, 1956, 21180, 23691, 21161, 21159, 31928, 19913, 20793, 29257, 27568, 33872, 23626]
    min = [18097, 23985, 29404, 6155, 10171, 25745, 19343, 2850, 27706, 14293, 31491, 17138, 21954, 21700, 26452, 12693, 23275, 5549, 10154, 33784, 19827, 9584, 26122, 2988, 11564, 12934, 25791, 2328, 2467, 27410, 34716, 21163, 15574, 33415, 27835, 17806, 11514, 20248, 28459, 9417, 23267, 26680, 4545, 25481, 20125, 26832, 10254, 7088, 16327, 24238, 5307, 12407, 11944, 31647, 14837, 5021, 28122, 7580, 30693, 30406, 18318, 17046, 22275, 32809, 18083, 25495, 28999, 13836, 1826, 28064, 32122, 25448, 33409, 4425, 15228, 18623, 2235, 4138, 22328, 3101, 4434, 29107, 10442, 8342, 1975, 18974, 7922, 31417, 22682, 19174, 2170, 14499, 21369, 29089, 33798, 465, 3488, 9783, 5116, 1121, 14411, 27259, 23770, 13936, 8209, 20520, 31380, 25829, 14175, 26929, 15670, 21533, 11698, 448, 24943, 32885, 24782, 11204, 5073, 27356, 34605, 12484, 23318, 20573, 14203, 33712, 7439, 21994, 8892, 16930, 16696, 6199, 2328, 28391, 12881, 14792, 32857, 9919, 32284, 101, 32585, 13443, 31141, 20084, 29620, 29233, 20723, 13179, 19974, 697]
    assert kijunSen(max, min) == 18114.0


def test_kijunSen_3():
    max = [15, 91, 81, 13, 80, 73, 100, 56, 73, 16, 60, 44, 61, 40, 5, 95, 19, 24, 55, 88, 26, 7, 23, 77, 68, 48, 14, 12, 99, 16, 23, 18, 24, 44, 13, 24, 19, 70, 78, 72, 63, 80, 29, 61, 35]
    min = [17, 31, 55, 48, 75, 81, 27, 60, 53, 42, 27, 98, 17, 19, 20, 89, 61, 16, 36, 96, 91, 93, 76, 15, 7, 82, 20, 7, 5, 36, 26, 28, 87, 93, 75, 71, 97, 71, 59, 93, 67, 90, 98, 40, 42]
    assert kijunSen(max, min) == 53.5


def test_kijunSen_4():
    max = [24099, 16480, 9838, 9382, 29871, 21465, 34583, 9056, 31326, 6165, 6117, 24796, 2230, 15139, 29962, 11859, 22849, 6383, 3456, 32727, 34661, 32971, 10543, 18509, 16623, 27133, 29247, 15659, 32972, 26149, 24439, 16482, 17851, 21448, 24581, 26997, 8061, 33884, 13394, 29673, 10068, 2987, 9254, 18256, 16823, 10077, 15831, 33068, 32852, 1176, 25372, 11921, 6714, 12462, 4634, 31243, 13756, 23381, 30780, 4786, 12212, 16843, 9916, 12087, 21328, 14444, 26797, 26882, 34496, 32650, 10220, 24221, 5312, 19093, 10279, 7623, 33553, 29353, 9807, 1847, 31941, 14050, 8781, 30588, 18497, 15459, 3308, 31755, 13951, 34209, 30922, 2538, 19846, 10653, 31334, 4505, 22626, 27724, 3290, 27598, 17580, 23230, 28781, 7708, 11635, 19295, 20517, 27211, 27367, 7363, 23260, 27232, 18862, 13799, 1173, 5896, 21222, 34672, 6664, 24624, 10100, 28920, 22599, 11570, 33878, 26004, 31858, 3895, 33264, 17819, 3038, 7519, 15461, 16406, 25087, 19968, 14674, 21238, 22080, 2172, 280, 33150, 10333, 34905, 30563, 3173, 5295, 3626, 21683, 10949]
    min = [22662, 12019, 7621, 6939, 34137, 24776, 11273, 25717, 10987, 33817, 16044, 15796, 26647, 9940, 7051, 16283, 32936, 5527, 11991, 23232, 27822, 15188, 29758, 24535, 19633, 12934, 2328, 22905, 13703, 8737, 3600, 4761, 30663, 18150, 19180, 29996, 8105, 931, 27770, 29324, 13893, 31191, 29227, 12134, 27045, 22122, 27727, 6772, 12833, 31795, 28320, 2770, 7212, 22890, 11045, 25801, 17361, 25465, 30680, 32706, 6294, 31760, 2725, 783, 25153, 25580, 10479, 17596, 4118, 26727, 29239, 18120, 16883, 9079, 6319, 4207, 34169, 21691, 25277, 23396, 19012, 1104, 1071, 6965, 21012, 23709, 23471, 13668, 32004, 33470, 25385, 34991, 32218, 27203, 11947, 18927, 32230, 3053, 18766, 15349, 13691, 9029, 9020, 9728, 31323, 21967, 5958, 19065, 21792, 407, 18725, 32768, 34632, 8572, 26596, 15384, 18122, 28451, 16604, 8344, 20317, 31591, 10690, 32725, 6095, 10239, 20654, 25758, 25629, 16554, 16082, 11258, 30215, 11422, 29805, 18219, 32644, 16456, 13940, 380, 20546, 34817, 991, 14682, 3020, 551, 16891, 3824, 9249, 25971]
    assert kijunSen(max, min) == 20094.0


def test_kijunSen_5():
    max = [61, 45, 93, 48, 45, 96, 9, 75, 26, 69, 75, 16, 67, 37, 75, 36, 13, 60, 86, 77, 81, 44, 52, 32, 30, 16, 23, 20, 43, 14, 77, 39, 11, 71, 49, 10, 6, 24, 94, 71, 67, 20, 55, 13, 23, 63, 67, 42, 58, 81, 66, 87, 72, 1, 93, 80, 54, 6, 54, 71, 70, 50, 36, 91, 14, 51, 37, 37, 71, 28, 86, 68, 8, 20]
    min = [93, 41, 91, 42, 93, 32, 21, 72, 5, 24, 90, 57, 51, 82, 50, 97, 4, 42, 37, 81, 46, 54, 93, 98, 53, 40, 72, 47, 94, 36, 70, 9, 24, 90, 18, 20, 52, 86, 30, 61, 82, 52, 66, 3, 20, 81, 51, 48, 53, 14, 22, 31, 64, 80, 14, 12, 69, 50, 63, 17, 68, 98, 22, 52, 11, 70, 1, 29, 18, 53, 15, 34, 29, 17]
    assert kijunSen(max, min) == 50.0


def test_kijunSen_6():
    max = [52, 83, 25, 57, 97, 35, 89, 55, 60, 88, 20, 36, 20, 43, 3, 12, 42, 56, 41, 29, 60, 16, 66, 84, 63, 76, 40, 88, 50, 5, 24]
    min = [72, 90, 58, 11, 8, 38, 64, 26, 66, 56, 47, 21, 1, 82, 64, 25, 79, 31, 91, 97, 94, 94, 87, 81, 45, 70, 98, 82, 53, 33, 21]
    assert kijunSen(max, min) == 49.0

#      CHIKO SPAN


def test_chikoSpan_ERROR_no_enough_value_1():
    data = [0, 1]
    assert chikoSpan(data) == ERROR


def test_chikoSpan_ERROR_no_enough_value_2():
    data = [randint(0, 100) for _ in range(8)]
    assert chikoSpan(data) == ERROR


def test_chikoSpan_1():
    data = [100, 24, 21, 98, 59, 47, 24, 51, 51, 76, 91, 62, 29, 62, 25, 71, 39, 5, 25, 65, 4, 58, 47, 26, 41, 40, 91, 44, 22, 62, 30, 32, 56, 73, 14, 18, 88, 2, 2, 2, 72, 32, 86, 21, 95, 19, 87, 99, 3, 65, 1, 94, 41, 100, 9, 91, 10, 36, 100, 72, 36, 26, 12, 64, 92, 19, 30, 61, 83, 63, 47, 36, 33, 100]
    assert chikoSpan(data) == 3


def test_chikoSpan_2():
    data = [28883, 33378, 20565, 2673, 8753, 30338, 2331, 2909, 15686, 16017, 29115, 32816, 13486, 24013, 5380, 615, 616, 31869, 28660, 31928, 24089, 18368, 12976, 11850, 14714, 9409, 18973, 25301, 10020, 26328, 2058, 27532, 12043, 7455, 15691, 29748, 20218, 31587, 33631, 11787, 18628, 16799, 11637, 1432, 13953, 31988, 29284, 8703, 1008, 19016, 13578, 5863, 14751, 17494, 26343, 25675, 12291, 1511, 32047, 26014, 16107, 32440, 17637, 32514, 11469, 9806, 29491, 6608, 5526, 34969, 30656, 8528, 8522, 26589, 14594, 29645, 16250, 28972, 32788, 8961, 2953, 14665, 5328, 13222, 7023, 17228, 4743, 27779, 9727, 29297, 18829, 11399, 29496, 17560, 10037, 30085, 19879, 25282, 928, 8079, 6505, 13388, 5771, 27363, 9722, 14274, 4349, 24299, 31319, 6380, 17711, 22943, 21573, 32885, 20322, 26691, 34144, 11504, 34103, 30791, 15844, 14530, 25380, 34032, 16846, 28074, 9617, 6843, 4812, 20013, 19303, 23390, 31934, 30799, 21748, 34573, 31414, 30590, 1956, 21180, 23691, 21161, 21159, 31928, 19913, 20793, 29257, 27568, 33872, 23626]
    assert chikoSpan(data) == 16846


def test_chikoSpan_3():
    data = [15, 91, 81, 13, 80, 73, 100, 56, 73, 16, 60, 44, 61, 40, 5, 95, 19, 24, 55, 88, 26, 7, 23, 77, 68, 48, 14, 12, 99, 16, 23, 18, 24, 44, 13, 24, 19, 70, 78, 72, 63, 80, 29, 61, 35]
    assert chikoSpan(data) == 88


def test_chikoSpan_4():
    data = [24099, 16480, 9838, 9382, 29871, 21465, 34583, 9056, 31326, 6165, 6117, 24796, 2230, 15139, 29962, 11859, 22849, 6383, 3456, 32727, 34661, 32971, 10543, 18509, 16623, 27133, 29247, 15659, 32972, 26149, 24439, 16482, 17851, 21448, 24581, 26997, 8061, 33884, 13394, 29673, 10068, 2987, 9254, 18256, 16823, 10077, 15831, 33068, 32852, 1176, 25372, 11921, 6714, 12462, 4634, 31243, 13756, 23381, 30780, 4786, 12212, 16843, 9916, 12087, 21328, 14444, 26797, 26882, 34496, 32650, 10220, 24221, 5312, 19093, 10279, 7623, 33553, 29353, 9807, 1847, 31941, 14050, 8781, 30588, 18497, 15459, 3308, 31755, 13951, 34209, 30922, 2538, 19846, 10653, 31334, 4505, 22626, 27724, 3290, 27598, 17580, 23230, 28781, 7708, 11635, 19295, 20517, 27211, 27367, 7363, 23260, 27232, 18862, 13799, 1173, 5896, 21222, 34672, 6664, 24624, 10100, 28920, 22599, 11570, 33878, 26004, 31858, 3895, 33264, 17819, 3038, 7519, 15461, 16406, 25087, 19968, 14674, 21238, 22080, 2172, 280, 33150, 10333, 34905, 30563, 3173, 5295, 3626, 21683, 10949]
    assert chikoSpan(data) == 33878


def test_chikoSpan_5():
    data = [61, 45, 93, 48, 45, 96, 9, 75, 26, 69, 75, 16, 67, 37, 75, 36, 13, 60, 86, 77, 81, 44, 52, 32, 30, 16, 23, 20, 43, 14, 77, 39, 11, 71, 49, 10, 6, 24, 94, 71, 67, 20, 55, 13, 23, 63, 67, 42, 58, 81, 66, 87, 72, 1, 93, 80, 54, 6, 54, 71, 70, 50, 36, 91, 14, 51, 37, 37, 71, 28, 86, 68, 8, 20]
    assert chikoSpan(data) == 58


def test_chikoSpan_6():
    data = [52, 83, 25, 57, 97, 35, 89, 55, 60, 88, 20, 36, 20, 43, 3, 12, 42, 56, 41, 29, 60, 16, 66, 84, 63, 76, 40, 88, 50, 5, 24]
    assert chikoSpan(data) == 35

#      SENKO SPAN A


def test_senkoSpanA_ERROR_no_enough_value_1():
    data = [0, 1]
    assert senkoSpanA(data, data) == ERROR


def test_senkoSpanA_ERROR_no_enough_value_2():
    data = [randint(0, 100) for _ in range(8)]
    assert senkoSpanA(data, data) == ERROR


def test_senkoSpanA_1():
    max = [100, 24, 21, 98, 59, 47, 24, 51, 51, 76, 91, 62, 29, 62, 25, 71, 39, 5, 25, 65, 4, 58, 47, 26, 41, 40, 91, 44, 22, 62, 30, 32, 56, 73, 14, 18, 88, 2, 2, 2, 72, 32, 86, 21, 95, 19, 87, 99, 3, 65, 1, 94, 41, 100, 9, 91, 10, 36, 100, 72, 36, 26, 12, 64, 92, 19, 30, 61, 83, 63, 47, 36, 33, 100]
    min = [27, 38, 22, 99, 35, 10, 27, 41, 45, 27, 95, 94, 49, 11, 28, 100, 49, 78, 81, 50, 55, 81, 42, 45, 88, 41, 1, 68, 2, 0, 75, 3, 75, 44, 12, 36, 11, 44, 66, 13, 68, 27, 60, 77, 51, 71, 73, 11, 64, 56, 56, 60, 40, 91, 61, 32, 3, 19, 38, 15, 72, 38, 27, 50, 23, 61, 77, 30, 83, 17, 63, 57, 47, 40]
    assert senkoSpanA(max, min) == 55.0


def test_senkoSpanA_2():
    max = [28883, 33378, 20565, 2673, 8753, 30338, 2331, 2909, 15686, 16017, 29115, 32816, 13486, 24013, 5380, 615, 616, 31869, 28660, 31928, 24089, 18368, 12976, 11850, 14714, 9409, 18973, 25301, 10020, 26328, 2058, 27532, 12043, 7455, 15691, 29748, 20218, 31587, 33631, 11787, 18628, 16799, 11637, 1432, 13953, 31988, 29284, 8703, 1008, 19016, 13578, 5863, 14751, 17494, 26343, 25675, 12291, 1511, 32047, 26014, 16107, 32440, 17637, 32514, 11469, 9806, 29491, 6608, 5526, 34969, 30656, 8528, 8522, 26589, 14594, 29645, 16250, 28972, 32788, 8961, 2953, 14665, 5328, 13222, 7023, 17228, 4743, 27779, 9727, 29297, 18829, 11399, 29496, 17560, 10037, 30085, 19879, 25282, 928, 8079, 6505, 13388, 5771, 27363, 9722, 14274, 4349, 24299, 31319, 6380, 17711, 22943, 21573, 32885, 20322, 26691, 34144, 11504, 34103, 30791, 15844, 14530, 25380, 34032, 16846, 28074, 9617, 6843, 4812, 20013, 19303, 23390, 31934, 30799, 21748, 34573, 31414, 30590, 1956, 21180, 23691, 21161, 21159, 31928, 19913, 20793, 29257, 27568, 33872, 23626]
    min = [18097, 23985, 29404, 6155, 10171, 25745, 19343, 2850, 27706, 14293, 31491, 17138, 21954, 21700, 26452, 12693, 23275, 5549, 10154, 33784, 19827, 9584, 26122, 2988, 11564, 12934, 25791, 2328, 2467, 27410, 34716, 21163, 15574, 33415, 27835, 17806, 11514, 20248, 28459, 9417, 23267, 26680, 4545, 25481, 20125, 26832, 10254, 7088, 16327, 24238, 5307, 12407, 11944, 31647, 14837, 5021, 28122, 7580, 30693, 30406, 18318, 17046, 22275, 32809, 18083, 25495, 28999, 13836, 1826, 28064, 32122, 25448, 33409, 4425, 15228, 18623, 2235, 4138, 22328, 3101, 4434, 29107, 10442, 8342, 1975, 18974, 7922, 31417, 22682, 19174, 2170, 14499, 21369, 29089, 33798, 465, 3488, 9783, 5116, 1121, 14411, 27259, 23770, 13936, 8209, 20520, 31380, 25829, 14175, 26929, 15670, 21533, 11698, 448, 24943, 32885, 24782, 11204, 5073, 27356, 34605, 12484, 23318, 20573, 14203, 33712, 7439, 21994, 8892, 16930, 16696, 6199, 2328, 28391, 12881, 14792, 32857, 9919, 32284, 101, 32585, 13443, 31141, 20084, 29620, 29233, 20723, 13179, 19974, 697]
    assert senkoSpanA(max, min) == 18114.0


def test_senkoSpanA_3():
    max = [15, 91, 81, 13, 80, 73, 100, 56, 73, 16, 60, 44, 61, 40, 5, 95, 19, 24, 55, 88, 26, 7, 23, 77, 68, 48, 14, 12, 99, 16, 23, 18, 24, 44, 13, 24, 19, 70, 78, 72, 63, 80, 29, 61, 35]
    min = [17, 31, 55, 48, 75, 81, 27, 60, 53, 42, 27, 98, 17, 19, 20, 89, 61, 16, 36, 96, 91, 93, 76, 15, 7, 82, 20, 7, 5, 36, 26, 28, 87, 93, 75, 71, 97, 71, 59, 93, 67, 90, 98, 40, 42]
    assert senkoSpanA(max, min) == 56.0


def test_senkoSpanA_4():
    max = [24099, 16480, 9838, 9382, 29871, 21465, 34583, 9056, 31326, 6165, 6117, 24796, 2230, 15139, 29962, 11859, 22849, 6383, 3456, 32727, 34661, 32971, 10543, 18509, 16623, 27133, 29247, 15659, 32972, 26149, 24439, 16482, 17851, 21448, 24581, 26997, 8061, 33884, 13394, 29673, 10068, 2987, 9254, 18256, 16823, 10077, 15831, 33068, 32852, 1176, 25372, 11921, 6714, 12462, 4634, 31243, 13756, 23381, 30780, 4786, 12212, 16843, 9916, 12087, 21328, 14444, 26797, 26882, 34496, 32650, 10220, 24221, 5312, 19093, 10279, 7623, 33553, 29353, 9807, 1847, 31941, 14050, 8781, 30588, 18497, 15459, 3308, 31755, 13951, 34209, 30922, 2538, 19846, 10653, 31334, 4505, 22626, 27724, 3290, 27598, 17580, 23230, 28781, 7708, 11635, 19295, 20517, 27211, 27367, 7363, 23260, 27232, 18862, 13799, 1173, 5896, 21222, 34672, 6664, 24624, 10100, 28920, 22599, 11570, 33878, 26004, 31858, 3895, 33264, 17819, 3038, 7519, 15461, 16406, 25087, 19968, 14674, 21238, 22080, 2172, 280, 33150, 10333, 34905, 30563, 3173, 5295, 3626, 21683, 10949]
    min = [22662, 12019, 7621, 6939, 34137, 24776, 11273, 25717, 10987, 33817, 16044, 15796, 26647, 9940, 7051, 16283, 32936, 5527, 11991, 23232, 27822, 15188, 29758, 24535, 19633, 12934, 2328, 22905, 13703, 8737, 3600, 4761, 30663, 18150, 19180, 29996, 8105, 931, 27770, 29324, 13893, 31191, 29227, 12134, 27045, 22122, 27727, 6772, 12833, 31795, 28320, 2770, 7212, 22890, 11045, 25801, 17361, 25465, 30680, 32706, 6294, 31760, 2725, 783, 25153, 25580, 10479, 17596, 4118, 26727, 29239, 18120, 16883, 9079, 6319, 4207, 34169, 21691, 25277, 23396, 19012, 1104, 1071, 6965, 21012, 23709, 23471, 13668, 32004, 33470, 25385, 34991, 32218, 27203, 11947, 18927, 32230, 3053, 18766, 15349, 13691, 9029, 9020, 9728, 31323, 21967, 5958, 19065, 21792, 407, 18725, 32768, 34632, 8572, 26596, 15384, 18122, 28451, 16604, 8344, 20317, 31591, 10690, 32725, 6095, 10239, 20654, 25758, 25629, 16554, 16082, 11258, 30215, 11422, 29805, 18219, 32644, 16456, 13940, 380, 20546, 34817, 991, 14682, 3020, 551, 16891, 3824, 9249, 25971]
    assert senkoSpanA(max, min) == 20427.5


def test_senkoSpanA_5():
    max = [61, 45, 93, 48, 45, 96, 9, 75, 26, 69, 75, 16, 67, 37, 75, 36, 13, 60, 86, 77, 81, 44, 52, 32, 30, 16, 23, 20, 43, 14, 77, 39, 11, 71, 49, 10, 6, 24, 94, 71, 67, 20, 55, 13, 23, 63, 67, 42, 58, 81, 66, 87, 72, 1, 93, 80, 54, 6, 54, 71, 70, 50, 36, 91, 14, 51, 37, 37, 71, 28, 86, 68, 8, 20]
    min = [93, 41, 91, 42, 93, 32, 21, 72, 5, 24, 90, 57, 51, 82, 50, 97, 4, 42, 37, 81, 46, 54, 93, 98, 53, 40, 72, 47, 94, 36, 70, 9, 24, 90, 18, 20, 52, 86, 30, 61, 82, 52, 66, 3, 20, 81, 51, 48, 53, 14, 22, 31, 64, 80, 14, 12, 69, 50, 63, 17, 68, 98, 22, 52, 11, 70, 1, 29, 18, 53, 15, 34, 29, 17]
    assert senkoSpanA(max, min) == 50.25


def test_senkoSpanA_6():
    max = [52, 83, 25, 57, 97, 35, 89, 55, 60, 88, 20, 36, 20, 43, 3, 12, 42, 56, 41, 29, 60, 16, 66, 84, 63, 76, 40, 88, 50, 5, 24]
    min = [72, 90, 58, 11, 8, 38, 64, 26, 66, 56, 47, 21, 1, 82, 64, 25, 79, 31, 91, 97, 94, 94, 87, 81, 45, 70, 98, 82, 53, 33, 21]
    assert senkoSpanA(max, min) == 50.75

#      SENKO SPAN B


def test_senkoSpanB_ERROR_no_enough_value_1():
    data = [0, 1]
    assert senkoSpanB(data, data) == ERROR


def test_senkoSpanB_ERROR_no_enough_value_2():
    data = [randint(0, 100) for _ in range(8)]
    assert senkoSpanB(data, data) == ERROR


def test_senkoSpanB_1():
    max = [100, 24, 21, 98, 59, 47, 24, 51, 51, 76, 91, 62, 29, 62, 25, 71, 39, 5, 25, 65, 4, 58, 47, 26, 41, 40, 91, 44, 22, 62, 30, 32, 56, 73, 14, 18, 88, 2, 2, 2, 72, 32, 86, 21, 95, 19, 87, 99, 3, 65, 1, 94, 41, 100, 9, 91, 10, 36, 100, 72, 36, 26, 12, 64, 92, 19, 30, 61, 83, 63, 47, 36, 33, 100]
    min = [27, 38, 22, 99, 35, 10, 27, 41, 45, 27, 95, 94, 49, 11, 28, 100, 49, 78, 81, 50, 55, 81, 42, 45, 88, 41, 1, 68, 2, 0, 75, 3, 75, 44, 12, 36, 11, 44, 66, 13, 68, 27, 60, 77, 51, 71, 73, 11, 64, 56, 56, 60, 40, 91, 61, 32, 3, 19, 38, 15, 72, 38, 27, 50, 23, 61, 77, 30, 83, 17, 63, 57, 47, 40]
    assert senkoSpanB(max, min) == 50.0


def test_senkoSpanB_2():
    max = [28883, 33378, 20565, 2673, 8753, 30338, 2331, 2909, 15686, 16017, 29115, 32816, 13486, 24013, 5380, 615, 616, 31869, 28660, 31928, 24089, 18368, 12976, 11850, 14714, 9409, 18973, 25301, 10020, 26328, 2058, 27532, 12043, 7455, 15691, 29748, 20218, 31587, 33631, 11787, 18628, 16799, 11637, 1432, 13953, 31988, 29284, 8703, 1008, 19016, 13578, 5863, 14751, 17494, 26343, 25675, 12291, 1511, 32047, 26014, 16107, 32440, 17637, 32514, 11469, 9806, 29491, 6608, 5526, 34969, 30656, 8528, 8522, 26589, 14594, 29645, 16250, 28972, 32788, 8961, 2953, 14665, 5328, 13222, 7023, 17228, 4743, 27779, 9727, 29297, 18829, 11399, 29496, 17560, 10037, 30085, 19879, 25282, 928, 8079, 6505, 13388, 5771, 27363, 9722, 14274, 4349, 24299, 31319, 6380, 17711, 22943, 21573, 32885, 20322, 26691, 34144, 11504, 34103, 30791, 15844, 14530, 25380, 34032, 16846, 28074, 9617, 6843, 4812, 20013, 19303, 23390, 31934, 30799, 21748, 34573, 31414, 30590, 1956, 21180, 23691, 21161, 21159, 31928, 19913, 20793, 29257, 27568, 33872, 23626]
    min = [18097, 23985, 29404, 6155, 10171, 25745, 19343, 2850, 27706, 14293, 31491, 17138, 21954, 21700, 26452, 12693, 23275, 5549, 10154, 33784, 19827, 9584, 26122, 2988, 11564, 12934, 25791, 2328, 2467, 27410, 34716, 21163, 15574, 33415, 27835, 17806, 11514, 20248, 28459, 9417, 23267, 26680, 4545, 25481, 20125, 26832, 10254, 7088, 16327, 24238, 5307, 12407, 11944, 31647, 14837, 5021, 28122, 7580, 30693, 30406, 18318, 17046, 22275, 32809, 18083, 25495, 28999, 13836, 1826, 28064, 32122, 25448, 33409, 4425, 15228, 18623, 2235, 4138, 22328, 3101, 4434, 29107, 10442, 8342, 1975, 18974, 7922, 31417, 22682, 19174, 2170, 14499, 21369, 29089, 33798, 465, 3488, 9783, 5116, 1121, 14411, 27259, 23770, 13936, 8209, 20520, 31380, 25829, 14175, 26929, 15670, 21533, 11698, 448, 24943, 32885, 24782, 11204, 5073, 27356, 34605, 12484, 23318, 20573, 14203, 33712, 7439, 21994, 8892, 16930, 16696, 6199, 2328, 28391, 12881, 14792, 32857, 9919, 32284, 101, 32585, 13443, 31141, 20084, 29620, 29233, 20723, 13179, 19974, 697]
    assert senkoSpanB(max, min) == 17979.5


def test_senkoSpanB_3():
    max = [15, 91, 81, 13, 80, 73, 100, 56, 73, 16, 60, 44, 61, 40, 5, 95, 19, 24, 55, 88, 26, 7, 23, 77, 68, 48, 14, 12, 99, 16, 23, 18, 24, 44, 13, 24, 19, 70, 78, 72, 63, 80, 29, 61, 35]
    min = [17, 31, 55, 48, 75, 81, 27, 60, 53, 42, 27, 98, 17, 19, 20, 89, 61, 16, 36, 96, 91, 93, 76, 15, 7, 82, 20, 7, 5, 36, 26, 28, 87, 93, 75, 71, 97, 71, 59, 93, 67, 90, 98, 40, 42]
    assert senkoSpanB(max, min) == ERROR


def test_senkoSpanB_4():
    max = [24099, 16480, 9838, 9382, 29871, 21465, 34583, 9056, 31326, 6165, 6117, 24796, 2230, 15139, 29962, 11859, 22849, 6383, 3456, 32727, 34661, 32971, 10543, 18509, 16623, 27133, 29247, 15659, 32972, 26149, 24439, 16482, 17851, 21448, 24581, 26997, 8061, 33884, 13394, 29673, 10068, 2987, 9254, 18256, 16823, 10077, 15831, 33068, 32852, 1176, 25372, 11921, 6714, 12462, 4634, 31243, 13756, 23381, 30780, 4786, 12212, 16843, 9916, 12087, 21328, 14444, 26797, 26882, 34496, 32650, 10220, 24221, 5312, 19093, 10279, 7623, 33553, 29353, 9807, 1847, 31941, 14050, 8781, 30588, 18497, 15459, 3308, 31755, 13951, 34209, 30922, 2538, 19846, 10653, 31334, 4505, 22626, 27724, 3290, 27598, 17580, 23230, 28781, 7708, 11635, 19295, 20517, 27211, 27367, 7363, 23260, 27232, 18862, 13799, 1173, 5896, 21222, 34672, 6664, 24624, 10100, 28920, 22599, 11570, 33878, 26004, 31858, 3895, 33264, 17819, 3038, 7519, 15461, 16406, 25087, 19968, 14674, 21238, 22080, 2172, 280, 33150, 10333, 34905, 30563, 3173, 5295, 3626, 21683, 10949]
    min = [22662, 12019, 7621, 6939, 34137, 24776, 11273, 25717, 10987, 33817, 16044, 15796, 26647, 9940, 7051, 16283, 32936, 5527, 11991, 23232, 27822, 15188, 29758, 24535, 19633, 12934, 2328, 22905, 13703, 8737, 3600, 4761, 30663, 18150, 19180, 29996, 8105, 931, 27770, 29324, 13893, 31191, 29227, 12134, 27045, 22122, 27727, 6772, 12833, 31795, 28320, 2770, 7212, 22890, 11045, 25801, 17361, 25465, 30680, 32706, 6294, 31760, 2725, 783, 25153, 25580, 10479, 17596, 4118, 26727, 29239, 18120, 16883, 9079, 6319, 4207, 34169, 21691, 25277, 23396, 19012, 1104, 1071, 6965, 21012, 23709, 23471, 13668, 32004, 33470, 25385, 34991, 32218, 27203, 11947, 18927, 32230, 3053, 18766, 15349, 13691, 9029, 9020, 9728, 31323, 21967, 5958, 19065, 21792, 407, 18725, 32768, 34632, 8572, 26596, 15384, 18122, 28451, 16604, 8344, 20317, 31591, 10690, 32725, 6095, 10239, 20654, 25758, 25629, 16554, 16082, 11258, 30215, 11422, 29805, 18219, 32644, 16456, 13940, 380, 20546, 34817, 991, 14682, 3020, 551, 16891, 3824, 9249, 25971]
    assert senkoSpanB(max, min) == 17796.0


def test_senkoSpanB_5():
    max = [61, 45, 93, 48, 45, 96, 9, 75, 26, 69, 75, 16, 67, 37, 75, 36, 13, 60, 86, 77, 81, 44, 52, 32, 30, 16, 23, 20, 43, 14, 77, 39, 11, 71, 49, 10, 6, 24, 94, 71, 67, 20, 55, 13, 23, 63, 67, 42, 58, 81, 66, 87, 72, 1, 93, 80, 54, 6, 54, 71, 70, 50, 36, 91, 14, 51, 37, 37, 71, 28, 86, 68, 8, 20]
    min = [93, 41, 91, 42, 93, 32, 21, 72, 5, 24, 90, 57, 51, 82, 50, 97, 4, 42, 37, 81, 46, 54, 93, 98, 53, 40, 72, 47, 94, 36, 70, 9, 24, 90, 18, 20, 52, 86, 30, 61, 82, 52, 66, 3, 20, 81, 51, 48, 53, 14, 22, 31, 64, 80, 14, 12, 69, 50, 63, 17, 68, 98, 22, 52, 11, 70, 1, 29, 18, 53, 15, 34, 29, 17]
    assert senkoSpanB(max, min) == 49.5


def test_senkoSpanB_6():
    max = [52, 83, 25, 57, 97, 35, 89, 55, 60, 88, 20, 36, 20, 43, 3, 12, 42, 56, 41, 29, 60, 16, 66, 84, 63, 76, 40, 88, 50, 5, 24]
    min = [72, 90, 58, 11, 8, 38, 64, 26, 66, 56, 47, 21, 1, 82, 64, 25, 79, 31, 91, 97, 94, 94, 87, 81, 45, 70, 98, 82, 53, 33, 21]
    assert senkoSpanB(max, min) == ERROR
